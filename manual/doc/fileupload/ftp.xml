<chapter id="fileupload_ftp">
	<title>FTP 서버를 이용한 파일 업로드</title>
	<para>이제까지 Apache Commons Fileupload와 연계하여 Spring MVC의 파일 업로드 기능을 구현하는 기본적인 방법에 대해 알아보았다.
	이번 장에서는 파일을 FTP 서버에 업로드하는 방법에 대해서 알아 보도록 한다. 이 때, Apache Commons VFS(http://commons.apache.org/vfs/)를 이용해서 FTP 서버에 접근하도록 한다. 
	Apache Commons VFS을 이용하여 FTP 또는 SFTP 프로토콜을 사용한 서버 접근 로직을 구현할 때에는 아래와 같은 참조 라이브러리가 필요하다.
	</para>
	<informaltable>
			<tgroup cols="2">
				<colspec colnum="1" colname="col1" colwidth="2*"/>
				<colspec colnum="2" colname="col2" colwidth="1*"/>
            	<thead>
     				<row>
                		<entry align="center">Dependency</entry>
                		<entry align="center">Required For</entry>
              		</row>
             	</thead>
             	<tbody>
              		<row>
                		<entry>Commons Net(http://commons.apache.org/net/) Version 2.0 or later.</entry>
                		<entry>FTP</entry>
              		</row>
              		<row>
                		<entry>JSch Version 0.1.42 or later.(http://www.jcraft.com/jsch/)</entry>
                		<entry>SFTP</entry>
              		</row>
            	</tbody>
          	</tgroup>
		</informaltable>
	<para>
	 	File Upload Plugin 설치 시 Commons VFS에서 제공하는 API를 사용하여 SFTP 서버에 파일을 업로드, 다운로드, 삭제하는 로직을 살펴 볼 수 있다. 
	 	이 때, 해당 Plugin에서 제공되는 SftpService 인터페이스를 통해 FTP 서버에 접근할 수 있으며 이를 구현한 SftpServiceImpl 클래스에서
		실제 Commons VFS API를 호출하는 로직을 담고 있다. 이러한 SftpService를 재사용하거나 확장 및 Customizing하여 실제 프로젝트에 적용할 수 있다. 
	 	이에 대한 상세한 내용은 아래와 같다.
	</para>
	<section id="fileupload_ftp_upload">
		<title>파일 업로드</title>
		<para>Anyframe File Upload Plugin에서 제공하고 있는 업로드 로직에 대해 알아보도록 한다. 먼저, JSP는 file 타입의 
		다중 파일 업로드를 가능하도록 구현되어 있다. 실제 코드는 아래와 같다.</para>
		<programlisting language="java"><![CDATA[<c:forEach var="attachedFile" items = "${attachedFiles}">
	<a href="<c:url value='/download.do'/>">${attachedFile.name}</a>  (${attachedFile.fileSize} Byte)<br/>
</c:forEach>]]></programlisting>
	<programlisting language="java"><![CDATA[var gFiles = 0;
function addFile() {
	var tr = document.createElement('tr');
	tr.setAttribute('id', 'file-' + gFiles);
	var td = document.createElement('td');
	//var removeFileId = "file"+gFiles
	td.innerHTML = '<input type="file" name="file"><span onclick="removeFile(\'file-' + gFiles + '\')" style="cursor:pointer;">Delete</span>'
	tr.appendChild(td);
	document.getElementById('files-root').appendChild(tr);
	gFiles++;
}
function removeFile(aId) {
	var obj = document.getElementById(aId);
	obj.parentNode.removeChild(obj);
}]]></programlisting>

	<para>위와 같이 구현하여 다중 파일 업로드를 가능하게 화면을 구성하였다. </para>
	<para>다음은 Controller 구현 부분이다. Spring MVC에서는 파일업로드를 위해 MultipartFile로 File 객체를 처리할 수 있다. Controller 구현부에서는 
	별도의 로직없이 MultipartFile 객체만 Service로 넘겨주고 있다. </para>
	<programlisting language="java"><![CDATA[@RequestMapping(params = "method=create")
public String create(]]> <emphasis role="bold">@RequestParam("file") MultipartFile[] files</emphasis> <![CDATA[,
		Movie movie, BindingResult results, SessionStatus status) throws Exception {
	
	]]> <emphasis role="bold">this.movieService.create(movie, files);</emphasis> <![CDATA[
	status.setComplete();

	return "redirect:/fileUploadMovieFinder.do?method=list";
}]]></programlisting>
	<para>Service에서는  유일한 File reference ID와 File ID를 생성하여 Movie, AttachedFile 객체에 대한 DB insert 실행 한 후 SftpService의 upload() 메소드를 호출하여 실제 FTP 서버에
	파일을 업로드하는 일을 하게 된다. </para>
	<programlisting language="java"><![CDATA[public void create(Movie movie, MultipartFile[] files) throws Exception {

	if (files.length > 0) {
		String fileRefId = "";
		SimpleDateFormat formatter = new SimpleDateFormat(
				"yyyyMMddHHmmssSSS", new Locale("ko", "KR"));
		String formattedValue = formatter.format(new Date());
		fileRefId = fileRefIdPrefix + formattedValue;

		movie.setFileRefId(fileRefId);

		movieDao.create(movie);

		for(int i = 0; i < files.length; i++){
			
			MultipartFile file = files[i];
			if(file.getSize() > 0){
				String id = "";
				SimpleDateFormat formatter_file = new SimpleDateFormat(
						"yyyyMMddHHmmssSSS", new Locale("ko", "KR"));
				String formattedValue_file = formatter_file.format(new Date());

				id = fileIdPrefix  + formattedValue_file;

				AttachedFile attachedFile = new AttachedFile();
				
				attachedFile.setRefId(fileRefId);
				attachedFile.setId(id);
				attachedFile.setName(file.getOriginalFilename());
				attachedFile.setFileSize(file.getSize());

				uploadInfoDao.create(attachedFile);

				//create local file
				File localFile = createLocalFile(id);
				file.transferTo(localFile);
				
				//SFTP 서버에 업로드
				]]> <emphasis role="bold">sftpService.upload(localFile, id);</emphasis> <![CDATA[
			}

		}
	}
}]]></programlisting>
	<para>SftpService의 업로드 로직은 아래와 같이 구현되어 있다. </para>
	<programlisting language="java"><![CDATA[public void upload(File localFile, String fileId)
			throws Exception {
	FileSystemOptions fsOptions = null;
	DefaultFileSystemManager fsManager = null;
	SftpFileProvider sftp = null;

	try {
		fsOptions = new FileSystemOptions();
		SftpFileSystemConfigBuilder.getInstance()
				.setStrictHostKeyChecking(fsOptions, "no");
		fsManager = new DefaultFileSystemManager();
		sftp = new SftpFileProvider();
		DefaultLocalFileProvider fspath = null;

		fspath = new DefaultLocalFileProvider();

		//initialize
		fspath.init();
		sftp.init();

		fsManager.addProvider("sftp", sftp);
		fsManager.addProvider("file", fspath);
		fsManager.init();

		SftpFileObject fo = null;

		try {
			]]> <emphasis role="bold">fo = (SftpFileObject) fsManager.resolveFile(ftpPath	+ fileId, fsOptions);
			FileObject localFileObject = fsManager.toFileObject(localFile);
			fo.copyFrom(localFileObject, Selectors.SELECT_SELF);</emphasis><![CDATA[
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			logger.debug(fo.getName() + " File이 SFTP 서버에 생성되었습니다.");
			if (fo != null)
				fo.close();
			localFile.delete();
			logger.debug("local File 삭제가 완료되었습니다.");
		}
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		if (sftp != null)
			sftp.close();
		if (fsManager != null)
			fsManager.close();
	}
}]]></programlisting>
	<para>위의 코드에서는 FileObject를 생성하여 Controller에서 넘어온 File 타입의 object를 SFTP 프로토콜을 사용하여 서버에 복사하고 있다. 이 때, 
	SFTP 서버의 경로 및 ID/password는 설정 파일에서 따로 관리하도록 한다. 다음은 이를 정의한 context.propertis 파일의 일부이다.</para>
	<programlisting><![CDATA[ftpPath = sftp://username:password@server.ip/folder/]]></programlisting>
	<para>SFTP 서버에 대한 경로를 프로젝트에 맞게 고쳐서 설정해주도록 한다.</para>
	</section>
	<section id="fileupload_ftp_download">
		<title>파일 다운로드</title>
		<para>파일 다운로드도 업로드와 마찬가지로 SftpService를 사용한다. 이 때, 파일의 ID를 가지고 FileObject를 얻어오는 방법과 특정 위치에 해당 파일을 다운로드하는 방법을 사용할 수 있다.</para>
		<programlisting><![CDATA[// 특정 위치에 FTP 파일 저장
public void download(File localFile, String fileId)
		throws Exception {
	FileSystemOptions fsOptions = null;
	DefaultFileSystemManager fsManager = null;
	SftpFileProvider sftp = null;
	
	try {
		fsOptions = new FileSystemOptions();
		SftpFileSystemConfigBuilder.getInstance()
				.setStrictHostKeyChecking(fsOptions, "no");
		fsManager = new DefaultFileSystemManager();
		sftp = new SftpFileProvider();
		DefaultLocalFileProvider fspath = null;

		fspath = new DefaultLocalFileProvider();

		fspath.init();
		sftp.init();

		fsManager.addProvider("sftp", sftp);
		fsManager.addProvider("file", fspath);
		fsManager.init();

		SftpFileObject fo = null;

		try {
			]]> <emphasis role="bold">fo = (SftpFileObject) fsManager.resolveFile(ftpPath
					+ fileId, fsOptions);

			FileObject localFileObject = fsManager
					.toFileObject(localFile);
			localFileObject.copyFrom(fo, Selectors.SELECT_SELF);</emphasis><![CDATA[
			logger.debug(localFileObject.getName() + " 파일이 저장되었습니다.");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (fo != null)
				fo.close();
		}
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		if (sftp != null)
			sftp.close();
		if (fsManager != null)
			fsManager.close();
	}
}

// FTP 서버에 있는 해당 FileObject를 얻어옴
public SftpFileObject getSftpFileObject(String fileId)
	throws Exception {
	FileSystemOptions fsOptions = null;
	DefaultFileSystemManager fsManager = null;
	SftpFileProvider sftp = null;
	
	SftpFileObject fo = null;
	
	try {
		fsOptions = new FileSystemOptions();
		SftpFileSystemConfigBuilder.getInstance()
				.setStrictHostKeyChecking(fsOptions, "no");
		fsManager = new DefaultFileSystemManager();
		sftp = new SftpFileProvider();
		DefaultLocalFileProvider fspath = null;
	
		fspath = new DefaultLocalFileProvider();
	
		fspath.init();
		sftp.init();
	
		fsManager.addProvider("sftp", sftp);
		fsManager.addProvider("file", fspath);
		fsManager.init();
	
		try {
			]]> <emphasis role="bold">fo = (SftpFileObject) fsManager.resolveFile(ftpPath
					+ fileId, fsOptions);</emphasis><![CDATA[
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			logger.debug(fo.getName() + " 파일을 얻어오는데 성공하였습니다.");
			if (fo != null)
				fo.close();
		}
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		if (sftp != null)
			sftp.close();
		if (fsManager != null)
			fsManager.close();
	}
	]]> <emphasis role="bold">return fo;</emphasis><![CDATA[
}]]></programlisting>
	<para>File Upload Plugin 샘플에서는 FileObject를 사용하여 직접 InputStream을 받아 파일을 출력해주는 로직으로 구현되어 있다. 다음은 이를 구현한 DownlodController의 일부이다.
	</para>
	<programlisting><![CDATA[//SFTP 다운로드 로직 추가(FileObject)
]]> <emphasis role="bold">SftpFileObject fo = sftpService.getSftpFileObject(id);</emphasis><![CDATA[

BufferedInputStream fin = null;
BufferedOutputStream outs = null;

try{
	if (fo.getType() == FileType.FILE) {
		//FileObject의  InputStream 사용
		fin = new BufferedInputStream(]]> <emphasis role="bold">fo.getInputStream()</emphasis><![CDATA[);
		outs = new BufferedOutputStream(response.getOutputStream());
		int read = 0;
		while ((read = fin.read()) != -1){
			outs.write(read);
		}
		
	}
}catch(Exception e){
	e.printStackTrace();
}finally{
	if (outs != null){
		outs.flush();
		outs.close();
	}
	if (fin != null){
		fin.close();
	}
}]]></programlisting>
	</section>
	<section id="fileupload_ftp_remove">
		<title>파일 삭제</title>
		<para>SFTP 서버에 있는 파일을 삭제할 경우에도 파일의 ID를 가지고 SftpService를 사용하여 서버에 있는 파일을 삭제 할 수 있다. 기존 Controller 코드와 Service 코드에 부가적인
		코딩은 불필요 하며 SftpService의 remove() 메소드를 콜해주어 해당 작업을 수행할 수 있다. </para>
		<programlisting><![CDATA[public void remove(String fileId) throws Exception {
		
	FileSystemOptions fsOptions = null;
	DefaultFileSystemManager fsManager = null;
	SftpFileProvider sftp = null;
	
	try {
		fsOptions = new FileSystemOptions();
		SftpFileSystemConfigBuilder.getInstance()
				.setStrictHostKeyChecking(fsOptions, "no");
		fsManager = new DefaultFileSystemManager();
		sftp = new SftpFileProvider();
		DefaultLocalFileProvider fspath = null;

		fspath = new DefaultLocalFileProvider();

		fspath.init();
		sftp.init();

		fsManager.addProvider("sftp", sftp);
		fsManager.addProvider("file", fspath);
		fsManager.init();

		SftpFileObject fo = null;

		try {
			]]> <emphasis role="bold">fo = (SftpFileObject) fsManager.resolveFile(ftpPath	+ fileId, fsOptions);
			fo.delete();</emphasis><![CDATA[
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			logger.debug("파일이 정상적으로 삭제되었습니다.");
			if (fo != null)
				fo.close();
		}
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		if (sftp != null)
			sftp.close();
		if (fsManager != null)
			fsManager.close();
	}
}]]></programlisting>
	</section>
	
</chapter>