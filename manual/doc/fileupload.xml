<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
[
<!ENTITY fileupload_ftp SYSTEM "fileupload/ftp.xml">
]
>
<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to you under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
-->
    
<book lang="ko">
	<title>Anyframe File Upload Plugin</title>
	
	<bookinfo>
		<copyright>
			<year>2007-2011</year>
			<holder>삼성SDS</holder>
		</copyright>
		<releaseinfo>Version 1.0.1</releaseinfo>

		<productname>Anyframe FileUpload Plugin</productname>

		<authorgroup>
			<corpauthor></corpauthor>
		</authorgroup>

		<mediaobject>
			<imageobject>
				<!-- logo 변경 -->
				<imagedata fileref="../image/common/logo_pdf.jpg"/>
			</imageobject>
		</mediaobject>
		<legalnotice>
			<para>본 문서의 저작권은 삼성SDS에 있으며 Anyframe 오픈소스 커뮤니티 활동의 목적하에서 자유로운 이용이 가능합니다.
			본 문서를 복제, 배포할 경우에는 저작권자를 명시하여 주시기 바라며 본 문서를 변경하실 경우에는 원문과 변경된 내용을 표시하여 주시기 바랍니다. 
			원문과 변경된 문서에 대한 상업적 용도의 활용은 허용되지 않습니다. 본 문서에 오류가 있다고 판단될 경우 이슈로 등록해 주시면 적절한 조치를 취하도록 하겠습니다.
			</para>
		</legalnotice>
	</bookinfo>
	
	<part id="fileupload_introduction_part">
		<title>Introduction</title>
		<partintro id="fileupload_introduction_part_intro">
			<para>
				Spring MVC에서는 MultipartResolver라는 모듈을 사용하여 웹UI에서 파일을 업로드할 수 있도록 지원하고 있다. 
				또한 <ulink url="http://jakarta.apache.org/commons/fileupload">Apache Commons FileUpload</ulink> 오픈 소스를 위한 MultipartResolver 구현체를 제공한다.
				Anyframe fileupload plugin은 Spring MVC 기반의 웹 어플리케이션에서 이러한 클래스들을 활용하여 
				파일업로드 기능을 구현하는 방법에 대해서 가이드하고 있다.
			</para>
			<para role="introduction_title"><emphasis role="bold">Installation</emphasis></para>
			<para>Command 창에서 다음과 같이 명령어를 입력하여 fileupload plugin을 설치한다.</para>
			<programlisting language="java"><![CDATA[mvn anyframe:install -Dname=fileupload]]></programlisting>
			<para>
				installed(mvn anyframe:installed) 혹은 jetty:run(mvn clean jetty:run) command를 이용하여 설치 결과를 확인해볼 수 있다. 
			</para>
			<para role="introduction_title"><emphasis role="bold">Dependent Plugins</emphasis></para>
			<informaltable>
				<tgroup cols="2">
					<colspec colnum="1" colname="col1" colwidth="5*" />
					<colspec colnum="2" colname="col2" colwidth="5*" />
					<thead>
						<row>
							<entry align="center">Plugin Name</entry>
							<entry align="center">Version Range</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="center"><ulink url="http://dev.anyframejava.org/docs/anyframe/plugin/essential/core/1.0.1/reference/htmlsingle/core.html">core</ulink></entry>
							<entry align="center" valign="middle">2.0.0 > *</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
		</partintro>
	</part>	
	<part id="fileupload_usage_part">
		<title>File Upload</title>
		<partintro id="fileupload_usage_part_intro">
			<para>
				Spring MVC는 파일 업로드 기능을 지원하기 위하여
			<ulink url="http://commons.apache.org/fileupload/"> Commons 파일 업로드</ulink> 라이브러리를 지원한다.
			commons 라이브러리를 사용하기 위해서는 commons-fileupload-x.x.jar 파일과 commons-io-x.x.jar파일이 필요하다. 
			이는 Anyframe 배포 라이브러리에 포함되어 있다.
			파일 업로드 기능을 구현하기 위해서는 먼저 빈 설정 파일에 다음과 같이 MultipartResolver를 정의해야한다.
			<programlisting language="xml"><![CDATA[<bean id="multipartResolver"
		    class="org.springframework.web.multipart.commons.]]><emphasis
		    role="bold">CommonsMultipartResolver</emphasis>"<![CDATA[>
    <property name="maxUploadSize">
        <value>10000000</value>
    </property>
</bean>]]></programlisting>
		
		  		<para>
		  			또한 해당 컨트롤러의 property로 파일의 업로드 위치를 지정해주고 컨트롤러에서 setter injection을
		  			통해 지정된 파일 업로드 위치를 불러올 수 있다. 사용예는 다음과 같다.
		  		</para>
		  		<programlisting language="xml"><![CDATA[<bean id="movieController"
    class="org.anyframe.sample.fileupload.movie.MovieController">
    <property name="destinationDir" value="C:/Temp/fileupload/temp" />
    <property name="movieService" ref="movieService" />
</bean>]]></programlisting>
		
				<para>
					파일 업로드를 위해 JSP파일의 입력 폼 타입을 file로 지정하고 form의 enctype을
		  			multipart/form-data로 지정한다.
		  		</para>
		
		  		<programlisting language="xml"><![CDATA[<body>
    <form name="fileForm" action="file.do" method="post"]]> <emphasis
      role="bold">enctype</emphasis>="<emphasis role="bold">multipart/form-data</emphasis>"<![CDATA[>
    파일  : <input type="file" style="width:400" name="file"><br/>
    <input type="submit" value="upload" />
    </form>
</body>]]></programlisting>
		
		  		<para>Spring MVC에서는 파일 업로드를 위해 MultipartFile이라는 객체 타입을 제공한다.</para>
		
		  		<programlisting language="java">private MultipartFile file;
private Long size;
private String name;
private String filePath;</programlisting>
		
		  		<para>다음은 파일 업로드를 위해 Controller를 구현한 모습이다.</para>
		
		  		<programlisting language="java">public class MovieController extends AbstractCommandController {
		    
    private File <emphasis role="bold">destinationDir</emphasis>;
    
    /** 
     * 파일업로드를 위한 빈 설정의 property로 지정해준 
     * destinationDir setter injection
     */
     <emphasis role="bold">public void setDestinationDir(File destinationDir) {
            this.destinationDir = destinationDir;</emphasis>
        }
    
    ...중략...
    
    protected ModelAndView handle(HttpServletRequest request,
            HttpServletResponse response, Object command, BindException exception)
            throws Exception {
        
        //전달 받은 Request값을 MultipartHttpServletRequest로 바인딩 시킨다.
       <emphasis role="bold"> MultipartHttpServletRequest multipartRequest
                                             = (MultipartHttpServletRequest) request;</emphasis>
        
        //request의 "file"을 찾아 file객체에 세팅한다.
        MultipartFile file = multipartRequest.getFile("file");
        String fileName = file.getOriginalFilename();
       <emphasis role="bold"> File destination = File.createTempFile("file", fileName, destinationDir);</emphasis>
        
        //파일카피
       <emphasis role="bold"> FileCopyUtils.copy(file.getInputStream(), new FileOutputStream(destination));</emphasis>
        
        //새로운 파일 속성 세팅
        HelloVO vo = (HelloVO) command;
        vo.setFilePath(destination.getAbsolutePath());
        vo.setName(file.getOriginalFilename());
        vo.setSize(file.getSize());
        vo.setFile(file);
        helloworldService.getMessage1(vo);
        return new ModelAndView("result", "message", vo);
    }
}</programlisting>
		
				<para>
					위와 같이 간단한 파일 업로드를 실행시켜 볼 수 있다. 위의 예제는 화면에서 업로드된 파일을
					MultipartFile타입으로 받았기 때문에 별다른 바인딩 작업이 필요하지않았다. 하지만 화면에서 업로드된 파일을
		  			String 타입으로 바인딩하려면 StringMultipartEditor, byte 타입의 배열로 바인딩 하려면 ByteArrayMultipartEditor를
		  			사용하여 Contoller에 다음과 같이 initBinder 메소드를 오버라이드하여 구현해 줄 수 있다.
		  		</para>
		
		  		<itemizedlist>
		    		<listitem>
		      			<para>StringMultipartEditor</para>
		      			<programlisting language="java">protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder)
                    throws ServletException {
    binder.registerCustomEditor(<emphasis role="bold">String.class, new StringMultipartFileEditor()</emphasis>);
}</programlisting>
		    		</listitem>
		
		    		<listitem>
		      			<para>ByteArrayMultipartEditor</para>
		      			<programlisting
		      			language="java">protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder)
                    throws ServletException {
    binder.registerCustomEditor(<emphasis role="bold">byte[].class, new ByteArrayMultipartFileEditor()</emphasis>);
}</programlisting>
		    		</listitem>
		  		</itemizedlist>
			</para>
		</partintro>	
		&fileupload_ftp;
	</part>
</book>